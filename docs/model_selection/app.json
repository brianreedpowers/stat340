[{"name":"app.R","content":"library(shiny)\r\n\r\nwhich.best <- function(x){\r\n  if(criterion==\"adjr2\") return (which.max(x)) else return (which.min(x))\r\n}\r\n\r\nresponseVar <- \"mpg\"\r\npredictors <- names(mtcars)[-which(names(mtcars)==responseVar)]\r\nnFormulas <- 2^length(predictors)\r\n\r\nnumber2binary = function(number, noBits) {\r\n  binary_vector = rev(as.numeric(intToBits(number)))\r\n  if(missing(noBits)) {\r\n    return(binary_vector)\r\n  } else {\r\n    binary_vector[-(1:(length(binary_vector) - noBits))]\r\n  }\r\n}\r\n\r\nallModels <- data.frame(i=0:(nFormulas-1))\r\nfor(predictor in predictors){\r\n  newdf <- data.frame(x=numeric(nFormulas)); names(newdf) <- predictor\r\n  allModels <- cbind(allModels, newdf)\r\n}\r\nallModels$size <- 0\r\nallModels$aic <- 0\r\nallModels$bic <- 0\r\nallModels$adjr2 <- 0\r\nfor(i in allModels$i){\r\n  allModels[i+1, 2:11] <- number2binary(i, length(predictors))\r\n  if(i==0){\r\n    f <- reformulate(\"1\", responseVar)\r\n  } else {\r\n    f <- reformulate(predictors[allModels[i+1,2:11]==1], responseVar)\r\n  }\r\n  allModels[i+1, \"size\"] <- sum(allModels[i+1, 2:11])+1\r\n  fit <- lm(f, data=mtcars)\r\n  allModels[i+1, \"adjr2\"] <- summary(fit)$adj.r.squared\r\n  allModels[i+1, \"aic\"] <- AIC(fit)\r\n  allModels[i+1, \"bic\"] <- -2*as.numeric(logLik(fit)) + log(nrow(mtcars))*(allModels[i+1, \"size\"]+1) \r\n}\r\n\r\nedges <- data.frame(from=numeric(), to=numeric())\r\nfor(i in allModels[-nrow(allModels),\"i\"]){\r\n  to <- i + 2^(which(rev(allModels[i,2:11]==0))-1)\r\n  from <- rep(i, length(to))\r\n  edges <- rbind(edges, data.frame(from,to))\r\n}\r\n\r\ncriterion <- \"adjr2\"\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Model Selection Visualization\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n          selectInput(\r\n            \"criterion\",\r\n            \"Compare Models by\",\r\n            c(\"adjr2\",\"aic\",\"bic\"),\r\n            selected = \"aic\"),\r\n          selectInput(\r\n            \"method\",\r\n            \"Model Selection Method\",\r\n            c(\"best subset\",\"forward stepwise\",\"backward stepwise\"),\r\n            selected = \"best subset\"),\r\n          p(\"In the mtcars dataset we consider linear models predicting \", strong(\"mpg\"), \" from the 10 other predictors.\"),\r\n          p(\"The available predictors are \", strong(\"cyl, disp, hp, drat, wt, qsec, vs, am, gear,\"),\"and \",strong(\"carb\"),\".\"),\r\n          p(\"Model size can range from 1 (a model with only an intercept) to 11 (the full model).\")\r\n          \r\n          ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n           plotOutput(\"mainPlot\")\r\n        ),\r\n        position = c(\"left\", \"right\"),\r\n        fluid = TRUE\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n    output$mainPlot <- renderPlot({\r\n      criterion <<- input$criterion\r\n      allModels$compare <- allModels[,criterion]\r\n      \r\n      if(input$method==\"best subset\"){\r\n        bestSubset <- numeric()\r\n        for(size in unique(allModels$size)){\r\n          bestSubset[size] <- allModels[allModels$size==size, \"i\"][which.best(allModels[allModels$size==size, criterion])]+1\r\n        }\r\n        plot(compare~size, data=allModels, main=paste(\"Best Subset by\",criterion), ylab=criterion)\r\n        points(compare~size, data=allModels[bestSubset,], col=\"magenta\", pch=16)\r\n        points(compare~size, data=allModels[bestSubset[which.best(allModels[bestSubset,criterion])],], col=\"magenta\", cex=2, lwd=2)\r\n      \r\n      } else if(input$method==\"forward stepwise\"){\r\n        bestForward <- numeric()\r\n        for(size in unique(allModels$size)){\r\n          if(size==1) bestForward[size] <- 1\r\n          else {\r\n            bestForward[size] <- allModels[edges[edges$from==bestForward[size-1],\"to\"] , \"i\"][which.best(allModels[edges[edges$from==bestForward[size-1],\"to\"], criterion])]+1\r\n          }\r\n        }\r\n        plot(compare~size, data=allModels, main=paste(\"Forward Stepwise by\",criterion), ylab=criterion)\r\n        segments(allModels[edges$from,\"size\"],allModels[edges$from,criterion],allModels[edges$to,\"size\"],allModels[edges$to,criterion], col=\"gray\")\r\n        points(compare~size, data=allModels)\r\n        edgesForward <- subset(edges, from %in% bestForward)\r\n        segments(allModels[edgesForward$from,\"size\"],allModels[edgesForward$from,criterion],allModels[edgesForward$to,\"size\"],allModels[edgesForward$to,criterion], col=\"red\")\r\n        points(compare~size, data=allModels[bestForward,], col=\"red\", pch=16)\r\n        points(compare~size, data=allModels[bestForward[which.best(allModels[bestForward,criterion])],], col=\"red\", cex=2, lwd=2)\r\n        \r\n      } else {\r\n        bestBackward <- numeric(max(allModels$size))\r\n        for(size in rev(unique(allModels$size))){\r\n          if(size==11) {bestBackward[size] <- 1024}\r\n          else {\r\n            bestBackward[size] <- allModels[edges[edges$to==bestBackward[size+1],\"from\"] , \"i\"][which.best(allModels[edges[edges$to==bestBackward[size+1],\"from\"], criterion])]+1\r\n          }\r\n        }\r\n        plot(compare~size, data=allModels, main=paste(\"Backward Stepwise by\",criterion), ylab=criterion)\r\n        segments(allModels[edges$from,\"size\"],allModels[edges$from,criterion],allModels[edges$to,\"size\"],allModels[edges$to,criterion], col=\"gray\")\r\n        points(compare~size, data=allModels)\r\n        edgesBackward <- subset(edges, to %in% bestBackward)\r\n        segments(allModels[edgesBackward$from,\"size\"],allModels[edgesBackward$from,criterion],allModels[edgesBackward$to,\"size\"],allModels[edgesBackward$to,criterion], col=\"blue\")\r\n        points(compare~size, data=allModels[bestBackward,], col=\"blue\", pch=16)\r\n        points(compare~size, data=allModels[bestBackward[which.best(allModels[bestBackward,criterion])],], col=\"blue\", cex=2, lwd=2)\r\n        \r\n    }\r\n            \r\n\r\n  })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
